{"type": "multibar","title": "Multibar Chart","optionPresets": {"file": "multibar_data","show_labels": "1"},"yAxisLabel": "Y-axis label","xAxisLabel": "X-axis label","optionDefaults": {"show_labels": "0","vertical": "1","show_values": "0","allow_scroll": "1","tick_display": ["wrap","stagger","rotate"]},"ui": {"[name=file]": {"values": [{"value": "multibar_data","label": "Forecasting for Q1"},{"value": "multibar_data_color","label": "Forecasting for Q2 (color data)"},{"value": "multibar_data_negative","label": "Forecasting for Q1 (negative)"},{"value": "multibar_data_wide","label": "Opportunities by Industry (wide)"},{"value": "multibar_data_baseline","label": "Opportunities Won/Lost by Industry (baseline)"},{"value": "multibar_data_opportunities","label": "All Opportunities By Lead Source By Outcome"},{"value": "multibar_data_long","label": "Accounts by Type by Industry"},{"value": "multibar_data_short","label": "Apples or Oranges"},{"value": "multibar_data_raw","label": "Raw Report Data"}]},"[name=vertical]": {"init": "function ($o) {\n          this.initControl($o.attr('name'));\n        }","bind": "function (d,v,$o) {\n          return this.bindControl(d, $o.attr('name'), v, this.chartRenderer());\n        }","chartInit": "function (v,self) {\n          var value = !!parseInt(v, 10);\n          self.Chart.vertical(value);\n        }","check": "new RegExp(/0|1/i)","events": "change.my","title": "Orientation","type": "radio","values": [{"value": "1","label": "Vertical"},{"value": "0","label": "Horizontal"}]},"[name=show_values]": {"init": "function ($o) {\n          this.initControl($o.attr('name'));\n        }","bind": "function (d,v,$o) {\n          return this.bindControl(d, $o.attr('name'), v, this.chartRenderer());\n        }","chartInit": "function (v,self) {\n          var value = isNaN(v) ? v : !!parseInt(v, 10);\n          self.Chart.showValues(value);\n        }","check": "new RegExp(/0|1|start|middle|end|top|total/i)","events": "change.my","title": "Show Values","type": "select","values": [{"value": "0","label": "No"},{"value": "1","label": "Yes"},{"value": "start","label": "Start"},{"value": "middle","label": "Middle"},{"value": "end","label": "End"},{"value": "top","label": "Top"},{"value": "total","label": "Total"}]},"[name=allow_scroll]": {"init": "function ($o) {\n          this.initControl($o.attr('name'));\n        }","bind": "function (d,v,$o) {\n          return this.bindControl(d, $o.attr('name'), v, this.chartUpdater());\n        }","chartInit": "function (v,self) {\n          var value = !!parseInt(v, 10);\n          self.Chart.allowScroll(value);\n          // d3.select('#chart svg')\n          //     .datum(null)\n          //     .call(chart);\n          // d3.select('#chart svg')\n          //     .datum(chartData)\n          //     .call(chart);\n        }","check": "new RegExp(/0|1/i)","events": "change.my","title": "Allow Scrolling","type": "radio","values": [{"value": "0","label": "No"},{"value": "1","label": "Yes"}]},"[name=show_labels]": {"init": "function ($o) {\n          this.initControl($o.attr('name'));\n        }","bind": "function (d,v,$o) {\n          return this.bindControl(d, $o.attr('name'), v, this.chartRenderer());\n        }","chartInit": "function (v,self) {\n          var value = !!parseInt(v, 10);\n          self.Chart.xAxis.axisLabel(value ? self.xAxisLabel : null);\n          self.Chart.yAxis.axisLabel(value ? self.yAxisLabel : null);\n        }","check": "new RegExp(/0|1/i)","events": "change.my","title": "Show Axes Labels","type": "radio","values": [{"value": "0","label": "No"},{"value": "1","label": "Yes"}]},"[name=tick_display]": {"init": "function ($o) {\n          this.initControl($o.attr('name'));\n        }","bind": "function (d,v,$o) {\n          return this.bindControl(d, $o.attr('name'), v, this.chartRenderer());\n        }","chartInit": "function (v,self) {\n          var wrapTicks = $.inArray('wrap', v) !== -1,\n              staggerTicks = $.inArray('stagger', v) !== -1,\n              rotateTicks = $.inArray('rotate', v) !== -1;\n          self.Chart\n            .wrapTicks(wrapTicks)\n            .staggerTicks(staggerTicks)\n            .rotateTicks(rotateTicks);\n        }","check": "new RegExp(/wrap|stagger|rotate/i)","events": "change.my","title": "Tick Display Methods","type": "checkbox","values": [{"value": "wrap","label": "Wrap"},{"value": "stagger","label": "Stagger"},{"value": "rotate","label": "Rotate"}]}}}
